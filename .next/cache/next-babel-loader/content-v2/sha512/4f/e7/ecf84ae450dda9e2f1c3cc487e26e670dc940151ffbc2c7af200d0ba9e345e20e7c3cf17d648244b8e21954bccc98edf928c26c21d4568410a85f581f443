{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lourdes\\\\Documents\\\\MedicalTeachingPassport\\\\pages\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { TransitionMotion, spring } from 'react-motion';\nimport { bindDefs } from '@nivo/core';\nimport { Container, SvgWrapper } from '@nivo/core';\nimport { Grid, Axes } from '@nivo/core';\nimport { CartesianMarkers } from '@nivo/core';\nimport { BoxLegendSvg } from '@nivo/legends';\nimport { generateGroupedBars, generateStackedBars } from './compute';\nimport setDisplayName from 'recompose/setDisplayName';\nimport enhance from './enhance';\nimport { BarPropTypes } from './props';\n\nconst barWillEnterHorizontal = ({\n  style\n}) => ({\n  x: style.x.val,\n  y: style.y.val,\n  width: 0,\n  height: style.height.val\n});\n\nconst barWillEnterVertical = ({\n  style\n}) => ({\n  x: style.x.val,\n  y: style.y.val + style.height.val,\n  width: style.width.val,\n  height: 0\n});\n\nconst barWillLeaveHorizontal = springConfig => ({\n  style\n}) => ({\n  x: style.x,\n  y: style.y,\n  width: spring(0, springConfig),\n  height: style.height\n});\n\nconst barWillLeaveVertical = springConfig => ({\n  style\n}) => ({\n  x: style.x,\n  y: spring(style.y.val + style.height.val, springConfig),\n  width: style.width,\n  height: spring(0, springConfig)\n});\n\nconst Bar = ({\n  data,\n  getIndex,\n  keys,\n  groupMode,\n  layout,\n  reverse,\n  minValue,\n  maxValue,\n  margin,\n  width,\n  height,\n  outerWidth,\n  outerHeight,\n  padding,\n  innerPadding,\n  // axes & grid\n  axisTop,\n  axisRight,\n  axisBottom,\n  axisLeft,\n  enableGridX,\n  enableGridY,\n  // customization\n  barComponent,\n  // labels\n  enableLabel,\n  getLabel,\n  labelSkipWidth,\n  labelSkipHeight,\n  getLabelTextColor,\n  // markers\n  markers,\n  // theming\n  theme,\n  getColor,\n  defs,\n  fill,\n  borderRadius,\n  borderWidth,\n  getBorderColor,\n  // motion\n  animate,\n  motionStiffness,\n  motionDamping,\n  // interactivity\n  isInteractive,\n  tooltipFormat,\n  tooltip,\n  onClick,\n  legends\n}) => {\n  const options = {\n    layout,\n    reverse,\n    data,\n    getIndex,\n    keys,\n    minValue,\n    maxValue,\n    width,\n    height,\n    getColor,\n    padding,\n    innerPadding\n  };\n  const result = groupMode === 'grouped' ? generateGroupedBars(options) : generateStackedBars(options);\n  const motionProps = {\n    animate,\n    motionDamping,\n    motionStiffness\n  };\n  const springConfig = {\n    damping: motionDamping,\n    stiffness: motionStiffness\n  };\n  const willEnter = layout === 'vertical' ? barWillEnterVertical : barWillEnterHorizontal;\n  const willLeave = layout === 'vertical' ? barWillLeaveVertical(springConfig) : barWillLeaveHorizontal(springConfig);\n\n  const shouldRenderLabel = ({\n    width,\n    height\n  }) => {\n    if (!enableLabel) return false;\n    if (labelSkipWidth > 0 && width < labelSkipWidth) return false;\n    if (labelSkipHeight > 0 && height < labelSkipHeight) return false;\n    return true;\n  };\n\n  const boundDefs = bindDefs(defs, result.bars, fill, {\n    dataKey: 'data',\n    targetKey: 'data.fill'\n  });\n  const legendDataForKeys = result.bars.filter(bar => bar.data.index === 0).map(bar => ({\n    label: bar.data.id,\n    fill: bar.data.fill ? bar.data.fill : bar.color\n  })).reverse();\n  const legendDataForIndexes = result.bars.filter(bar => bar.data.id === keys[0]).map(bar => ({\n    label: bar.data.indexValue,\n    fill: bar.data.fill ? bar.data.fill : bar.color\n  }));\n  result.bars = result.bars.filter(bar => bar.height === 0);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    isInteractive: isInteractive,\n    theme: theme,\n    children: ({\n      showTooltip,\n      hideTooltip\n    }) => {\n      const commonProps = {\n        borderRadius,\n        borderWidth,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        showTooltip,\n        hideTooltip,\n        onClick,\n        theme,\n        tooltipFormat,\n        tooltip\n      };\n      let bars;\n\n      if (animate === true) {\n        bars = /*#__PURE__*/_jsxDEV(TransitionMotion, {\n          willEnter: willEnter,\n          willLeave: willLeave,\n          styles: result.bars.map(bar => ({\n            key: bar.key,\n            data: bar,\n            style: {\n              x: spring(bar.x, springConfig),\n              y: spring(bar.y, springConfig),\n              width: spring(bar.width, springConfig),\n              height: spring(bar.height, springConfig)\n            }\n          })),\n          children: interpolatedStyles => /*#__PURE__*/_jsxDEV(\"g\", {\n            children: interpolatedStyles.map(({\n              key,\n              style,\n              data: bar\n            }) => {\n              const baseProps = _objectSpread(_objectSpread({}, bar), style);\n\n              return /*#__PURE__*/React.createElement(barComponent, _objectSpread(_objectSpread(_objectSpread({\n                key\n              }, baseProps), commonProps), {}, {\n                shouldRenderLabel: shouldRenderLabel(baseProps),\n                width: Math.max(style.width, 0),\n                height: Math.max(style.height, 0),\n                label: getLabel(bar.data),\n                labelColor: getLabelTextColor(baseProps, theme),\n                borderColor: getBorderColor(baseProps)\n              }));\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this);\n      } else {\n        bars = result.bars.map(d => /*#__PURE__*/React.createElement(barComponent, _objectSpread(_objectSpread(_objectSpread({\n          key: d.key\n        }, d), commonProps), {}, {\n          label: getLabel(d.data),\n          shouldRenderLabel: shouldRenderLabel(d),\n          labelColor: getLabelTextColor(d, theme),\n          borderColor: getBorderColor(d)\n        })));\n      }\n\n      return /*#__PURE__*/_jsxDEV(SvgWrapper, {\n        width: outerWidth,\n        height: outerHeight,\n        margin: margin,\n        defs: boundDefs,\n        children: [/*#__PURE__*/_jsxDEV(Grid, _objectSpread({\n          theme: theme,\n          width: width,\n          height: height,\n          xScale: enableGridX ? result.xScale : null,\n          yScale: enableGridY ? result.yScale : null\n        }, motionProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Axes, _objectSpread({\n          xScale: result.xScale,\n          yScale: result.yScale,\n          width: width,\n          height: height,\n          theme: theme,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft\n        }, motionProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this), bars, /*#__PURE__*/_jsxDEV(CartesianMarkers, {\n          markers: markers,\n          width: width,\n          height: height,\n          xScale: result.xScale,\n          yScale: result.yScale,\n          theme: theme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }, this), legends.map((legend, i) => {\n          let legendData;\n\n          if (legend.dataFrom === 'keys') {\n            legendData = legendDataForKeys;\n          } else if (legend.dataFrom === 'indexes') {\n            legendData = legendDataForIndexes;\n          }\n\n          if (legendData === undefined) return null;\n          return /*#__PURE__*/_jsxDEV(BoxLegendSvg, _objectSpread(_objectSpread({}, legend), {}, {\n            containerWidth: width,\n            containerHeight: height,\n            data: legendData\n          }), i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n\nBar.propTypes = BarPropTypes;\nexport default setDisplayName('Bar')(enhance(Bar));","map":{"version":3,"sources":["C:/Users/Lourdes/Documents/MedicalTeachingPassport/pages/index.js"],"names":["React","TransitionMotion","spring","bindDefs","Container","SvgWrapper","Grid","Axes","CartesianMarkers","BoxLegendSvg","generateGroupedBars","generateStackedBars","setDisplayName","enhance","BarPropTypes","barWillEnterHorizontal","style","x","val","y","width","height","barWillEnterVertical","barWillLeaveHorizontal","springConfig","barWillLeaveVertical","Bar","data","getIndex","keys","groupMode","layout","reverse","minValue","maxValue","margin","outerWidth","outerHeight","padding","innerPadding","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","barComponent","enableLabel","getLabel","labelSkipWidth","labelSkipHeight","getLabelTextColor","markers","theme","getColor","defs","fill","borderRadius","borderWidth","getBorderColor","animate","motionStiffness","motionDamping","isInteractive","tooltipFormat","tooltip","onClick","legends","options","result","motionProps","damping","stiffness","willEnter","willLeave","shouldRenderLabel","boundDefs","bars","dataKey","targetKey","legendDataForKeys","filter","bar","index","map","label","id","color","legendDataForIndexes","indexValue","showTooltip","hideTooltip","commonProps","key","interpolatedStyles","baseProps","createElement","Math","max","labelColor","borderColor","d","xScale","yScale","legend","i","legendData","dataFrom","undefined","propTypes"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { TransitionMotion, spring } from 'react-motion'\r\nimport { bindDefs } from '@nivo/core'\r\nimport { Container, SvgWrapper } from '@nivo/core'\r\nimport { Grid, Axes } from '@nivo/core'\r\nimport { CartesianMarkers } from '@nivo/core'\r\nimport { BoxLegendSvg } from '@nivo/legends'\r\nimport { generateGroupedBars, generateStackedBars } from './compute'\r\nimport setDisplayName from 'recompose/setDisplayName'\r\nimport enhance from './enhance'\r\nimport { BarPropTypes } from './props'\r\n\r\nconst barWillEnterHorizontal = ({ style }) => ({\r\n    x: style.x.val,\r\n    y: style.y.val,\r\n    width: 0,\r\n    height: style.height.val,\r\n})\r\n\r\nconst barWillEnterVertical = ({ style }) => ({\r\n    x: style.x.val,\r\n    y: style.y.val + style.height.val,\r\n    width: style.width.val,\r\n    height: 0,\r\n})\r\n\r\nconst barWillLeaveHorizontal = springConfig => ({ style }) => ({\r\n    x: style.x,\r\n    y: style.y,\r\n    width: spring(0, springConfig),\r\n    height: style.height,\r\n})\r\n\r\nconst barWillLeaveVertical = springConfig => ({ style }) => ({\r\n    x: style.x,\r\n    y: spring(style.y.val + style.height.val, springConfig),\r\n    width: style.width,\r\n    height: spring(0, springConfig),\r\n})\r\n\r\nconst Bar = ({\r\n    data,\r\n    getIndex,\r\n    keys,\r\n\r\n    groupMode,\r\n    layout,\r\n    reverse,\r\n    minValue,\r\n    maxValue,\r\n\r\n    margin,\r\n    width,\r\n    height,\r\n    outerWidth,\r\n    outerHeight,\r\n    padding,\r\n    innerPadding,\r\n\r\n    // axes & grid\r\n    axisTop,\r\n    axisRight,\r\n    axisBottom,\r\n    axisLeft,\r\n    enableGridX,\r\n    enableGridY,\r\n\r\n    // customization\r\n    barComponent,\r\n\r\n    // labels\r\n    enableLabel,\r\n    getLabel,\r\n    labelSkipWidth,\r\n    labelSkipHeight,\r\n    getLabelTextColor,\r\n\r\n    // markers\r\n    markers,\r\n\r\n    // theming\r\n    theme,\r\n    getColor,\r\n    defs,\r\n    fill,\r\n    borderRadius,\r\n    borderWidth,\r\n    getBorderColor,\r\n\r\n    // motion\r\n    animate,\r\n    motionStiffness,\r\n    motionDamping,\r\n\r\n    // interactivity\r\n    isInteractive,\r\n    tooltipFormat,\r\n    tooltip,\r\n    onClick,\r\n\r\n    legends,\r\n}) => {\r\n    const options = {\r\n        layout,\r\n        reverse,\r\n        data,\r\n        getIndex,\r\n        keys,\r\n        minValue,\r\n        maxValue,\r\n        width,\r\n        height,\r\n        getColor,\r\n        padding,\r\n        innerPadding,\r\n    }\r\n    const result =\r\n        groupMode === 'grouped' ? generateGroupedBars(options) : generateStackedBars(options)\r\n\r\n    const motionProps = {\r\n        animate,\r\n        motionDamping,\r\n        motionStiffness,\r\n    }\r\n\r\n    const springConfig = {\r\n        damping: motionDamping,\r\n        stiffness: motionStiffness,\r\n    }\r\n\r\n    const willEnter = layout === 'vertical' ? barWillEnterVertical : barWillEnterHorizontal\r\n    const willLeave =\r\n        layout === 'vertical'\r\n            ? barWillLeaveVertical(springConfig)\r\n            : barWillLeaveHorizontal(springConfig)\r\n\r\n    const shouldRenderLabel = ({ width, height }) => {\r\n        if (!enableLabel) return false\r\n        if (labelSkipWidth > 0 && width < labelSkipWidth) return false\r\n        if (labelSkipHeight > 0 && height < labelSkipHeight) return false\r\n        return true\r\n    }\r\n\r\n    const boundDefs = bindDefs(defs, result.bars, fill, {\r\n        dataKey: 'data',\r\n        targetKey: 'data.fill',\r\n    })\r\n\r\n    const legendDataForKeys = result.bars\r\n        .filter(bar => bar.data.index === 0)\r\n        .map(bar => ({\r\n            label: bar.data.id,\r\n            fill: bar.data.fill ? bar.data.fill : bar.color,\r\n        }))\r\n        .reverse()\r\n\r\n    const legendDataForIndexes = result.bars.filter(bar => bar.data.id === keys[0]).map(bar => ({\r\n        label: bar.data.indexValue,\r\n        fill: bar.data.fill ? bar.data.fill : bar.color,\r\n    }))\r\n\r\n    result.bars = result.bars.filter(bar => bar.height === 0)\r\n\r\n    return (\r\n        <Container isInteractive={isInteractive} theme={theme}>\r\n            {({ showTooltip, hideTooltip }) => {\r\n                const commonProps = {\r\n                    borderRadius,\r\n                    borderWidth,\r\n                    enableLabel,\r\n                    labelSkipWidth,\r\n                    labelSkipHeight,\r\n                    showTooltip,\r\n                    hideTooltip,\r\n                    onClick,\r\n                    theme,\r\n                    tooltipFormat,\r\n                    tooltip,\r\n                }\r\n\r\n                let bars\r\n                if (animate === true) {\r\n                    bars = (\r\n                        <TransitionMotion\r\n                            willEnter={willEnter}\r\n                            willLeave={willLeave}\r\n                            styles={result.bars.map(bar => ({\r\n                                key: bar.key,\r\n                                data: bar,\r\n                                style: {\r\n                                    x: spring(bar.x, springConfig),\r\n                                    y: spring(bar.y, springConfig),\r\n                                    width: spring(bar.width, springConfig),\r\n                                    height: spring(bar.height, springConfig),\r\n                                },\r\n                            }))}\r\n                        >\r\n                            {interpolatedStyles => (\r\n                                <g>\r\n                                    {interpolatedStyles.map(({ key, style, data: bar }) => {\r\n                                        const baseProps = { ...bar, ...style }\r\n\r\n                                        return React.createElement(barComponent, {\r\n                                            key,\r\n                                            ...baseProps,\r\n                                            ...commonProps,\r\n                                            shouldRenderLabel: shouldRenderLabel(baseProps),\r\n                                            width: Math.max(style.width, 0),\r\n                                            height: Math.max(style.height, 0),\r\n                                            label: getLabel(bar.data),\r\n                                            labelColor: getLabelTextColor(baseProps, theme),\r\n                                            borderColor: getBorderColor(baseProps),\r\n                                        })\r\n                                    })}\r\n                                </g>\r\n                            )}\r\n                        </TransitionMotion>\r\n                    )\r\n                } else {\r\n                    bars = result.bars.map(d =>\r\n                        React.createElement(barComponent, {\r\n                            key: d.key,\r\n                            ...d,\r\n                            ...commonProps,\r\n                            label: getLabel(d.data),\r\n                            shouldRenderLabel: shouldRenderLabel(d),\r\n                            labelColor: getLabelTextColor(d, theme),\r\n                            borderColor: getBorderColor(d),\r\n                        })\r\n                    )\r\n                }\r\n\r\n                return (\r\n                    <SvgWrapper\r\n                        width={outerWidth}\r\n                        height={outerHeight}\r\n                        margin={margin}\r\n                        defs={boundDefs}\r\n                    >\r\n                        <Grid\r\n                            theme={theme}\r\n                            width={width}\r\n                            height={height}\r\n                            xScale={enableGridX ? result.xScale : null}\r\n                            yScale={enableGridY ? result.yScale : null}\r\n                            {...motionProps}\r\n                        />\r\n                        <Axes\r\n                            xScale={result.xScale}\r\n                            yScale={result.yScale}\r\n                            width={width}\r\n                            height={height}\r\n                            theme={theme}\r\n                            top={axisTop}\r\n                            right={axisRight}\r\n                            bottom={axisBottom}\r\n                            left={axisLeft}\r\n                            {...motionProps}\r\n                        />\r\n                        {bars}\r\n                        <CartesianMarkers\r\n                            markers={markers}\r\n                            width={width}\r\n                            height={height}\r\n                            xScale={result.xScale}\r\n                            yScale={result.yScale}\r\n                            theme={theme}\r\n                        />\r\n                        {legends.map((legend, i) => {\r\n                            let legendData\r\n                            if (legend.dataFrom === 'keys') {\r\n                                legendData = legendDataForKeys\r\n                            } else if (legend.dataFrom === 'indexes') {\r\n                                legendData = legendDataForIndexes\r\n                            }\r\n\r\n                            if (legendData === undefined) return null\r\n\r\n                            return (\r\n                                <BoxLegendSvg\r\n                                    key={i}\r\n                                    {...legend}\r\n                                    containerWidth={width}\r\n                                    containerHeight={height}\r\n                                    data={legendData}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </SvgWrapper>\r\n                )\r\n            }}\r\n        </Container>\r\n    )\r\n}\r\n\r\nBar.propTypes = BarPropTypes\r\n\r\nexport default setDisplayName('Bar')(enhance(Bar))"]},"metadata":{},"sourceType":"module"}