{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lourdes\\\\Documents\\\\MedicalTeachingPassport\\\\pages\\\\index.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { TransitionMotion, spring } from 'react-motion';\nimport { bindDefs } from '@nivo/core';\nimport { Container, SvgWrapper } from '@nivo/core';\nimport { Grid, Axes } from '@nivo/core';\nimport { CartesianMarkers } from '@nivo/core';\nimport { BoxLegendSvg } from '@nivo/legends';\nimport { generateGroupedBars, generateStackedBars } from './compute';\nimport setDisplayName from 'recompose/setDisplayName';\nimport enhance from './enhance';\nimport { BarPropTypes } from './props';\n\nvar barWillEnterHorizontal = function barWillEnterHorizontal(_ref) {\n  var style = _ref.style;\n  return {\n    x: style.x.val,\n    y: style.y.val,\n    width: 0,\n    height: style.height.val\n  };\n};\n\nvar barWillEnterVertical = function barWillEnterVertical(_ref2) {\n  var style = _ref2.style;\n  return {\n    x: style.x.val,\n    y: style.y.val + style.height.val,\n    width: style.width.val,\n    height: 0\n  };\n};\n\nvar barWillLeaveHorizontal = function barWillLeaveHorizontal(springConfig) {\n  return function (_ref3) {\n    var style = _ref3.style;\n    return {\n      x: style.x,\n      y: style.y,\n      width: spring(0, springConfig),\n      height: style.height\n    };\n  };\n};\n\nvar barWillLeaveVertical = function barWillLeaveVertical(springConfig) {\n  return function (_ref4) {\n    var style = _ref4.style;\n    return {\n      x: style.x,\n      y: spring(style.y.val + style.height.val, springConfig),\n      width: style.width,\n      height: spring(0, springConfig)\n    };\n  };\n};\n\nvar Bar = function Bar(_ref5) {\n  var data = _ref5.data,\n      getIndex = _ref5.getIndex,\n      keys = _ref5.keys,\n      groupMode = _ref5.groupMode,\n      layout = _ref5.layout,\n      reverse = _ref5.reverse,\n      minValue = _ref5.minValue,\n      maxValue = _ref5.maxValue,\n      margin = _ref5.margin,\n      width = _ref5.width,\n      height = _ref5.height,\n      outerWidth = _ref5.outerWidth,\n      outerHeight = _ref5.outerHeight,\n      padding = _ref5.padding,\n      innerPadding = _ref5.innerPadding,\n      axisTop = _ref5.axisTop,\n      axisRight = _ref5.axisRight,\n      axisBottom = _ref5.axisBottom,\n      axisLeft = _ref5.axisLeft,\n      enableGridX = _ref5.enableGridX,\n      enableGridY = _ref5.enableGridY,\n      barComponent = _ref5.barComponent,\n      enableLabel = _ref5.enableLabel,\n      getLabel = _ref5.getLabel,\n      labelSkipWidth = _ref5.labelSkipWidth,\n      labelSkipHeight = _ref5.labelSkipHeight,\n      getLabelTextColor = _ref5.getLabelTextColor,\n      markers = _ref5.markers,\n      theme = _ref5.theme,\n      getColor = _ref5.getColor,\n      defs = _ref5.defs,\n      fill = _ref5.fill,\n      borderRadius = _ref5.borderRadius,\n      borderWidth = _ref5.borderWidth,\n      getBorderColor = _ref5.getBorderColor,\n      animate = _ref5.animate,\n      motionStiffness = _ref5.motionStiffness,\n      motionDamping = _ref5.motionDamping,\n      isInteractive = _ref5.isInteractive,\n      tooltipFormat = _ref5.tooltipFormat,\n      tooltip = _ref5.tooltip,\n      onClick = _ref5.onClick,\n      legends = _ref5.legends;\n  var options = {\n    layout: layout,\n    reverse: reverse,\n    data: data,\n    getIndex: getIndex,\n    keys: keys,\n    minValue: minValue,\n    maxValue: maxValue,\n    width: width,\n    height: height,\n    getColor: getColor,\n    padding: padding,\n    innerPadding: innerPadding\n  };\n  var result = groupMode === 'grouped' ? generateGroupedBars(options) : generateStackedBars(options);\n  var motionProps = {\n    animate: animate,\n    motionDamping: motionDamping,\n    motionStiffness: motionStiffness\n  };\n  var springConfig = {\n    damping: motionDamping,\n    stiffness: motionStiffness\n  };\n  var willEnter = layout === 'vertical' ? barWillEnterVertical : barWillEnterHorizontal;\n  var willLeave = layout === 'vertical' ? barWillLeaveVertical(springConfig) : barWillLeaveHorizontal(springConfig);\n\n  var shouldRenderLabel = function shouldRenderLabel(_ref6) {\n    var width = _ref6.width,\n        height = _ref6.height;\n    if (!enableLabel) return false;\n    if (labelSkipWidth > 0 && width < labelSkipWidth) return false;\n    if (labelSkipHeight > 0 && height < labelSkipHeight) return false;\n    return true;\n  };\n\n  var boundDefs = bindDefs(defs, result.bars, fill, {\n    dataKey: 'data',\n    targetKey: 'data.fill'\n  });\n  var legendDataForKeys = result.bars.filter(function (bar) {\n    return bar.data.index === 0;\n  }).map(function (bar) {\n    return {\n      label: bar.data.id,\n      fill: bar.data.fill ? bar.data.fill : bar.color\n    };\n  }).reverse();\n  var legendDataForIndexes = result.bars.filter(function (bar) {\n    return bar.data.id === keys[0];\n  }).map(function (bar) {\n    return {\n      label: bar.data.indexValue,\n      fill: bar.data.fill ? bar.data.fill : bar.color\n    };\n  });\n  result.bars = result.bars.filter(function (bar) {\n    return bar.height === 0;\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    isInteractive: isInteractive,\n    theme: theme,\n    children: function children(_ref7) {\n      var showTooltip = _ref7.showTooltip,\n          hideTooltip = _ref7.hideTooltip;\n      var commonProps = {\n        borderRadius: borderRadius,\n        borderWidth: borderWidth,\n        enableLabel: enableLabel,\n        labelSkipWidth: labelSkipWidth,\n        labelSkipHeight: labelSkipHeight,\n        showTooltip: showTooltip,\n        hideTooltip: hideTooltip,\n        onClick: onClick,\n        theme: theme,\n        tooltipFormat: tooltipFormat,\n        tooltip: tooltip\n      };\n      var bars;\n\n      if (animate === true) {\n        bars = /*#__PURE__*/_jsxDEV(TransitionMotion, {\n          willEnter: willEnter,\n          willLeave: willLeave,\n          styles: result.bars.map(function (bar) {\n            return {\n              key: bar.key,\n              data: bar,\n              style: {\n                x: spring(bar.x, springConfig),\n                y: spring(bar.y, springConfig),\n                width: spring(bar.width, springConfig),\n                height: spring(bar.height, springConfig)\n              }\n            };\n          }),\n          children: function children(interpolatedStyles) {\n            return /*#__PURE__*/_jsxDEV(\"g\", {\n              children: interpolatedStyles.map(function (_ref8) {\n                var key = _ref8.key,\n                    style = _ref8.style,\n                    bar = _ref8.data;\n\n                var baseProps = _objectSpread(_objectSpread({}, bar), style);\n\n                return /*#__PURE__*/React.createElement(barComponent, _objectSpread(_objectSpread(_objectSpread({\n                  key: key\n                }, baseProps), commonProps), {}, {\n                  shouldRenderLabel: shouldRenderLabel(baseProps),\n                  width: Math.max(style.width, 0),\n                  height: Math.max(style.height, 0),\n                  label: getLabel(bar.data),\n                  labelColor: getLabelTextColor(baseProps, theme),\n                  borderColor: getBorderColor(baseProps)\n                }));\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, _this);\n      } else {\n        bars = result.bars.map(function (d) {\n          return /*#__PURE__*/React.createElement(barComponent, _objectSpread(_objectSpread(_objectSpread({\n            key: d.key\n          }, d), commonProps), {}, {\n            label: getLabel(d.data),\n            shouldRenderLabel: shouldRenderLabel(d),\n            labelColor: getLabelTextColor(d, theme),\n            borderColor: getBorderColor(d)\n          }));\n        });\n      }\n\n      return /*#__PURE__*/_jsxDEV(SvgWrapper, {\n        width: outerWidth,\n        height: outerHeight,\n        margin: margin,\n        defs: boundDefs,\n        children: [/*#__PURE__*/_jsxDEV(Grid, _objectSpread({\n          theme: theme,\n          width: width,\n          height: height,\n          xScale: enableGridX ? result.xScale : null,\n          yScale: enableGridY ? result.yScale : null\n        }, motionProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(Axes, _objectSpread({\n          xScale: result.xScale,\n          yScale: result.yScale,\n          width: width,\n          height: height,\n          theme: theme,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft\n        }, motionProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, _this), bars, /*#__PURE__*/_jsxDEV(CartesianMarkers, {\n          markers: markers,\n          width: width,\n          height: height,\n          xScale: result.xScale,\n          yScale: result.yScale,\n          theme: theme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }, _this), legends.map(function (legend, i) {\n          var legendData;\n\n          if (legend.dataFrom === 'keys') {\n            legendData = legendDataForKeys;\n          } else if (legend.dataFrom === 'indexes') {\n            legendData = legendDataForIndexes;\n          }\n\n          if (legendData === undefined) return null;\n          return /*#__PURE__*/_jsxDEV(BoxLegendSvg, _objectSpread(_objectSpread({}, legend), {}, {\n            containerWidth: width,\n            containerHeight: height,\n            data: legendData\n          }), i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 33\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = Bar;\nBar.propTypes = BarPropTypes;\nexport default setDisplayName('Bar')(enhance(Bar));\n\nvar _c;\n\n$RefreshReg$(_c, \"Bar\");","map":{"version":3,"sources":["C:/Users/Lourdes/Documents/MedicalTeachingPassport/pages/index.js"],"names":["React","TransitionMotion","spring","bindDefs","Container","SvgWrapper","Grid","Axes","CartesianMarkers","BoxLegendSvg","generateGroupedBars","generateStackedBars","setDisplayName","enhance","BarPropTypes","barWillEnterHorizontal","style","x","val","y","width","height","barWillEnterVertical","barWillLeaveHorizontal","springConfig","barWillLeaveVertical","Bar","data","getIndex","keys","groupMode","layout","reverse","minValue","maxValue","margin","outerWidth","outerHeight","padding","innerPadding","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","barComponent","enableLabel","getLabel","labelSkipWidth","labelSkipHeight","getLabelTextColor","markers","theme","getColor","defs","fill","borderRadius","borderWidth","getBorderColor","animate","motionStiffness","motionDamping","isInteractive","tooltipFormat","tooltip","onClick","legends","options","result","motionProps","damping","stiffness","willEnter","willLeave","shouldRenderLabel","boundDefs","bars","dataKey","targetKey","legendDataForKeys","filter","bar","index","map","label","id","color","legendDataForIndexes","indexValue","showTooltip","hideTooltip","commonProps","key","interpolatedStyles","baseProps","createElement","Math","max","labelColor","borderColor","d","xScale","yScale","legend","i","legendData","dataFrom","undefined","propTypes"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { TransitionMotion, spring } from 'react-motion'\r\nimport { bindDefs } from '@nivo/core'\r\nimport { Container, SvgWrapper } from '@nivo/core'\r\nimport { Grid, Axes } from '@nivo/core'\r\nimport { CartesianMarkers } from '@nivo/core'\r\nimport { BoxLegendSvg } from '@nivo/legends'\r\nimport { generateGroupedBars, generateStackedBars } from './compute'\r\nimport setDisplayName from 'recompose/setDisplayName'\r\nimport enhance from './enhance'\r\nimport { BarPropTypes } from './props'\r\n\r\nconst barWillEnterHorizontal = ({ style }) => ({\r\n    x: style.x.val,\r\n    y: style.y.val,\r\n    width: 0,\r\n    height: style.height.val,\r\n})\r\n\r\nconst barWillEnterVertical = ({ style }) => ({\r\n    x: style.x.val,\r\n    y: style.y.val + style.height.val,\r\n    width: style.width.val,\r\n    height: 0,\r\n})\r\n\r\nconst barWillLeaveHorizontal = springConfig => ({ style }) => ({\r\n    x: style.x,\r\n    y: style.y,\r\n    width: spring(0, springConfig),\r\n    height: style.height,\r\n})\r\n\r\nconst barWillLeaveVertical = springConfig => ({ style }) => ({\r\n    x: style.x,\r\n    y: spring(style.y.val + style.height.val, springConfig),\r\n    width: style.width,\r\n    height: spring(0, springConfig),\r\n})\r\n\r\nconst Bar = ({\r\n    data,\r\n    getIndex,\r\n    keys,\r\n\r\n    groupMode,\r\n    layout,\r\n    reverse,\r\n    minValue,\r\n    maxValue,\r\n\r\n    margin,\r\n    width,\r\n    height,\r\n    outerWidth,\r\n    outerHeight,\r\n    padding,\r\n    innerPadding,\r\n\r\n    // axes & grid\r\n    axisTop,\r\n    axisRight,\r\n    axisBottom,\r\n    axisLeft,\r\n    enableGridX,\r\n    enableGridY,\r\n\r\n    // customization\r\n    barComponent,\r\n\r\n    // labels\r\n    enableLabel,\r\n    getLabel,\r\n    labelSkipWidth,\r\n    labelSkipHeight,\r\n    getLabelTextColor,\r\n\r\n    // markers\r\n    markers,\r\n\r\n    // theming\r\n    theme,\r\n    getColor,\r\n    defs,\r\n    fill,\r\n    borderRadius,\r\n    borderWidth,\r\n    getBorderColor,\r\n\r\n    // motion\r\n    animate,\r\n    motionStiffness,\r\n    motionDamping,\r\n\r\n    // interactivity\r\n    isInteractive,\r\n    tooltipFormat,\r\n    tooltip,\r\n    onClick,\r\n\r\n    legends,\r\n}) => {\r\n    const options = {\r\n        layout,\r\n        reverse,\r\n        data,\r\n        getIndex,\r\n        keys,\r\n        minValue,\r\n        maxValue,\r\n        width,\r\n        height,\r\n        getColor,\r\n        padding,\r\n        innerPadding,\r\n    }\r\n    const result =\r\n        groupMode === 'grouped' ? generateGroupedBars(options) : generateStackedBars(options)\r\n\r\n    const motionProps = {\r\n        animate,\r\n        motionDamping,\r\n        motionStiffness,\r\n    }\r\n\r\n    const springConfig = {\r\n        damping: motionDamping,\r\n        stiffness: motionStiffness,\r\n    }\r\n\r\n    const willEnter = layout === 'vertical' ? barWillEnterVertical : barWillEnterHorizontal\r\n    const willLeave =\r\n        layout === 'vertical'\r\n            ? barWillLeaveVertical(springConfig)\r\n            : barWillLeaveHorizontal(springConfig)\r\n\r\n    const shouldRenderLabel = ({ width, height }) => {\r\n        if (!enableLabel) return false\r\n        if (labelSkipWidth > 0 && width < labelSkipWidth) return false\r\n        if (labelSkipHeight > 0 && height < labelSkipHeight) return false\r\n        return true\r\n    }\r\n\r\n    const boundDefs = bindDefs(defs, result.bars, fill, {\r\n        dataKey: 'data',\r\n        targetKey: 'data.fill',\r\n    })\r\n\r\n    const legendDataForKeys = result.bars\r\n        .filter(bar => bar.data.index === 0)\r\n        .map(bar => ({\r\n            label: bar.data.id,\r\n            fill: bar.data.fill ? bar.data.fill : bar.color,\r\n        }))\r\n        .reverse()\r\n\r\n    const legendDataForIndexes = result.bars.filter(bar => bar.data.id === keys[0]).map(bar => ({\r\n        label: bar.data.indexValue,\r\n        fill: bar.data.fill ? bar.data.fill : bar.color,\r\n    }))\r\n\r\n    result.bars = result.bars.filter(bar => bar.height === 0)\r\n\r\n    return (\r\n        <Container isInteractive={isInteractive} theme={theme}>\r\n            {({ showTooltip, hideTooltip }) => {\r\n                const commonProps = {\r\n                    borderRadius,\r\n                    borderWidth,\r\n                    enableLabel,\r\n                    labelSkipWidth,\r\n                    labelSkipHeight,\r\n                    showTooltip,\r\n                    hideTooltip,\r\n                    onClick,\r\n                    theme,\r\n                    tooltipFormat,\r\n                    tooltip,\r\n                }\r\n\r\n                let bars\r\n                if (animate === true) {\r\n                    bars = (\r\n                        <TransitionMotion\r\n                            willEnter={willEnter}\r\n                            willLeave={willLeave}\r\n                            styles={result.bars.map(bar => ({\r\n                                key: bar.key,\r\n                                data: bar,\r\n                                style: {\r\n                                    x: spring(bar.x, springConfig),\r\n                                    y: spring(bar.y, springConfig),\r\n                                    width: spring(bar.width, springConfig),\r\n                                    height: spring(bar.height, springConfig),\r\n                                },\r\n                            }))}\r\n                        >\r\n                            {interpolatedStyles => (\r\n                                <g>\r\n                                    {interpolatedStyles.map(({ key, style, data: bar }) => {\r\n                                        const baseProps = { ...bar, ...style }\r\n\r\n                                        return React.createElement(barComponent, {\r\n                                            key,\r\n                                            ...baseProps,\r\n                                            ...commonProps,\r\n                                            shouldRenderLabel: shouldRenderLabel(baseProps),\r\n                                            width: Math.max(style.width, 0),\r\n                                            height: Math.max(style.height, 0),\r\n                                            label: getLabel(bar.data),\r\n                                            labelColor: getLabelTextColor(baseProps, theme),\r\n                                            borderColor: getBorderColor(baseProps),\r\n                                        })\r\n                                    })}\r\n                                </g>\r\n                            )}\r\n                        </TransitionMotion>\r\n                    )\r\n                } else {\r\n                    bars = result.bars.map(d =>\r\n                        React.createElement(barComponent, {\r\n                            key: d.key,\r\n                            ...d,\r\n                            ...commonProps,\r\n                            label: getLabel(d.data),\r\n                            shouldRenderLabel: shouldRenderLabel(d),\r\n                            labelColor: getLabelTextColor(d, theme),\r\n                            borderColor: getBorderColor(d),\r\n                        })\r\n                    )\r\n                }\r\n\r\n                return (\r\n                    <SvgWrapper\r\n                        width={outerWidth}\r\n                        height={outerHeight}\r\n                        margin={margin}\r\n                        defs={boundDefs}\r\n                    >\r\n                        <Grid\r\n                            theme={theme}\r\n                            width={width}\r\n                            height={height}\r\n                            xScale={enableGridX ? result.xScale : null}\r\n                            yScale={enableGridY ? result.yScale : null}\r\n                            {...motionProps}\r\n                        />\r\n                        <Axes\r\n                            xScale={result.xScale}\r\n                            yScale={result.yScale}\r\n                            width={width}\r\n                            height={height}\r\n                            theme={theme}\r\n                            top={axisTop}\r\n                            right={axisRight}\r\n                            bottom={axisBottom}\r\n                            left={axisLeft}\r\n                            {...motionProps}\r\n                        />\r\n                        {bars}\r\n                        <CartesianMarkers\r\n                            markers={markers}\r\n                            width={width}\r\n                            height={height}\r\n                            xScale={result.xScale}\r\n                            yScale={result.yScale}\r\n                            theme={theme}\r\n                        />\r\n                        {legends.map((legend, i) => {\r\n                            let legendData\r\n                            if (legend.dataFrom === 'keys') {\r\n                                legendData = legendDataForKeys\r\n                            } else if (legend.dataFrom === 'indexes') {\r\n                                legendData = legendDataForIndexes\r\n                            }\r\n\r\n                            if (legendData === undefined) return null\r\n\r\n                            return (\r\n                                <BoxLegendSvg\r\n                                    key={i}\r\n                                    {...legend}\r\n                                    containerWidth={width}\r\n                                    containerHeight={height}\r\n                                    data={legendData}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </SvgWrapper>\r\n                )\r\n            }}\r\n        </Container>\r\n    )\r\n}\r\n\r\nBar.propTypes = BarPropTypes\r\n\r\nexport default setDisplayName('Bar')(enhance(Bar))"]},"metadata":{},"sourceType":"module"}