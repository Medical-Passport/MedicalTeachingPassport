{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Lourdes\\\\Documents\\\\MedicalTeachingPassport\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useTable, usePagination, useSortBy, useFilters, useGroupBy, useExpanded, useRowSelect } from 'react-table'; // import makeData from '../example/makedata.js'\n// Create an editable cell renderer\n\nvar EditableCell = function EditableCell(_ref) {\n  _s();\n\n  var initialValue = _ref.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateMyData = _ref.updateMyData,\n      editable = _ref.editable;\n\n  // We need to keep and update the state of the cell normally\n  var _React$useState = React.useState(initialValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed externall, sync it up with our state\n\n\n  React.useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  if (!editable) {\n    return \"\".concat(initialValue);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, _this);\n}; // Define a default UI for filtering\n\n\n_s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c = EditableCell;\n\nfunction DefaultColumnFilter(_ref2) {\n  var _ref2$column = _ref2.column,\n      filterValue = _ref2$column.filterValue,\n      preFilteredRows = _ref2$column.preFilteredRows,\n      setFilter = _ref2$column.setFilter;\n  var count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: filterValue || '',\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: \"Search \".concat(count, \" records...\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c2 = DefaultColumnFilter;\n\nfunction SelectColumnFilter(_ref3) {\n  _s2();\n\n  var _this2 = this;\n\n  var _ref3$column = _ref3.column,\n      filterValue = _ref3$column.filterValue,\n      setFilter = _ref3$column.setFilter,\n      preFilteredRows = _ref3$column.preFilteredRows,\n      id = _ref3$column.id;\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  var options = React.useMemo(function () {\n    var options = new Set();\n    preFilteredRows.forEach(function (row) {\n      options.add(row.values[id]);\n    });\n    return _toConsumableArray(options.values());\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: filterValue,\n    onChange: function onChange(e) {\n      setFilter(e.target.value || undefined);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), options.map(function (option, i) {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, _this2);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this);\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\n_s2(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c3 = SelectColumnFilter;\n\nfunction SliderColumnFilter(_ref4) {\n  _s3();\n\n  var _ref4$column = _ref4.column,\n      filterValue = _ref4$column.filterValue,\n      setFilter = _ref4$column.setFilter,\n      preFilteredRows = _ref4$column.preFilteredRows,\n      id = _ref4$column.id;\n\n  // Calculate the min and max\n  // using the preFilteredRows\n  var _React$useMemo = React.useMemo(function () {\n    var min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    var max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(function (row) {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      min = _React$useMemo2[0],\n      max = _React$useMemo2[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: filterValue || min,\n      onChange: function onChange(e) {\n        setFilter(parseInt(e.target.value, 10));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return setFilter(undefined);\n      },\n      children: \"Off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\n_s3(SliderColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c4 = SliderColumnFilter;\n\nfunction NumberRangeColumnFilter(_ref5) {\n  _s4();\n\n  var _ref5$column = _ref5.column,\n      _ref5$column$filterVa = _ref5$column.filterValue,\n      filterValue = _ref5$column$filterVa === void 0 ? [] : _ref5$column$filterVa,\n      preFilteredRows = _ref5$column.preFilteredRows,\n      setFilter = _ref5$column.setFilter,\n      id = _ref5$column.id;\n\n  var _React$useMemo3 = React.useMemo(function () {\n    var min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    var max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(function (row) {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]),\n      _React$useMemo4 = _slicedToArray(_React$useMemo3, 2),\n      min = _React$useMemo4[0],\n      max = _React$useMemo4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue[0] || '',\n      type: \"number\",\n      onChange: function onChange(e) {\n        var val = e.target.value;\n        setFilter(function () {\n          var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return [val ? parseInt(val, 10) : undefined, old[1]];\n        });\n      },\n      placeholder: \"Min (\".concat(min, \")\"),\n      style: {\n        width: '70px',\n        marginRight: '0.5rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), \"to\", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue[1] || '',\n      type: \"number\",\n      onChange: function onChange(e) {\n        var val = e.target.value;\n        setFilter(function () {\n          var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return [old[0], val ? parseInt(val, 10) : undefined];\n        });\n      },\n      placeholder: \"Max (\".concat(max, \")\"),\n      style: {\n        width: '70px',\n        marginLeft: '0.5rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 7\n  }, this);\n}\n\n_s4(NumberRangeColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c5 = NumberRangeColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [function (row) {\n      return row.values[id];\n    }]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = function (val) {\n  return !val;\n}; // Be sure to pass our updateMyData and the skipReset option\n\n\nfunction Table(_ref6) {\n  _s5();\n\n  var _this3 = this;\n\n  var columns = _ref6.columns,\n      data = _ref6.data,\n      updateMyData = _ref6.updateMyData,\n      skipReset = _ref6.skipReset;\n  var td_header = \"px-4 py-2\";\n  var td_style = \"border px-4 py-2\";\n  var filterTypes = React.useMemo(function () {\n    return {\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: function text(rows, id, filterValue) {\n        return rows.filter(function (row) {\n          var rowValue = row.values[id];\n          return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n        });\n      }\n    };\n  }, []);\n  var defaultColumn = React.useMemo(function () {\n    return {\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      // And also our default editable cell\n      Cell: EditableCell\n    };\n  }, []); // Use the state and functions returned from useTable to build your UI\n\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    filterTypes: filterTypes,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData,\n    // We also need to pass this so the page doesn't change\n    // when we edit the data.\n    autoResetPage: !skipReset,\n    autoResetSelectedRows: !skipReset,\n    disableMultiSort: true\n  }, useFilters, useGroupBy, useSortBy, useExpanded, usePagination, useRowSelect, // Here we will use a plugin to add our selection column\n  function (hooks) {\n    hooks.visibleColumns.push(function (columns) {\n      return [{\n        id: 'selection',\n        // Make this column a groupByBoundary. This ensures that groupBy columns\n        // are placed after it\n        groupByBoundary: true,\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: function Header(_ref7) {\n          var getToggleAllRowsSelectedProps = _ref7.getToggleAllRowsSelectedProps;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, _objectSpread({}, getToggleAllRowsSelectedProps()), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, _this3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, _this3);\n        },\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: function Cell(_ref8) {\n          var row = _ref8.row;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, _objectSpread({}, row.getToggleRowSelectedProps()), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 19\n            }, _this3)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, _this3);\n        }\n      }].concat(_toConsumableArray(columns));\n    });\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize,\n      sortBy = _useTable$state.sortBy,\n      groupBy = _useTable$state.groupBy,\n      expanded = _useTable$state.expanded,\n      filters = _useTable$state.filters,\n      selectedRowIds = _useTable$state.selectedRowIds; // Render the UI for your table\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", _objectSpread(_objectSpread({\n      className: \"w-full text-md bg-white shadow-md rounded mb-4\"\n    }, getTableProps()), {}, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(function (headerGroup) {\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n            children: headerGroup.headers.map(function (column) {\n              return /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({\n                className: td_header\n              }, column.getHeaderProps()), {}, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [column.canGroupBy ?\n                  /*#__PURE__*/\n                  // If the column can be grouped, let's add a toggle\n                  _jsxDEV(\"span\", _objectSpread(_objectSpread({}, column.getGroupByToggleProps()), {}, {\n                    children: column.isGrouped ? 'Click to Un-Group 🛑 Click to Sort!' : ' Click to Group 🔮 Click to Sort!'\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 25\n                  }, _this3) : null, /*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, column.getSortByToggleProps()), {}, {\n                    children: [column.render('Header'), column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '']\n                  }), void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 23\n                  }, _this3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 21\n                }, _this3), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: column.canFilter ? column.render('Filter') : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 21\n                }, _this3)]\n              }), void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, _this3);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, _this3);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n        children: page.map(function (row) {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n            children: row.cells.map(function (cell) {\n              return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({\n                className: td_style\n              }, cell.getCellProps()), {}, {\n                children: cell.isGrouped ?\n                /*#__PURE__*/\n                // If it's a grouped cell, add an expander and row count\n                _jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, row.getToggleRowExpandedProps()), {}, {\n                    children: row.isExpanded ? '👇' : '👉'\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 29\n                  }, _this3), ' ', cell.render('Cell', {\n                    editable: false\n                  }), \" (\", row.subRows.length, \")\"]\n                }, void 0, true) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n                // renderer for cell\n                cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n                // Otherwise, just render the regular cell\n                cell.render('Cell', {\n                  editable: true\n                })\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 23\n              }, _this3);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 17\n          }, _this3);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return gotoPage(0);\n        },\n        disabled: !canPreviousPage,\n        children: '<<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return previousPage();\n        },\n        disabled: !canPreviousPage,\n        children: '<'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return nextPage();\n        },\n        disabled: !canNextPage,\n        children: '>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return gotoPage(pageCount - 1);\n        },\n        disabled: !canNextPage,\n        children: '>>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"| Go to page:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: pageIndex + 1,\n          onChange: function onChange(e) {\n            var page = e.target.value ? Number(e.target.value) - 1 : 0;\n            gotoPage(page);\n          },\n          style: {\n            width: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"select\", {\n        value: pageSize,\n        onChange: function onChange(e) {\n          setPageSize(Number(e.target.value));\n        },\n        children: [10, 20, 30, 40, 50].map(function (pageSize) {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pageSize,\n            children: [\"Show \", pageSize]\n          }, pageSize, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, _this3);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // Define a custom filter filter function!\n\n\n_s5(Table, \"sskXFlzu84fwQzAK8KrJ6xAJOlk=\", false, function () {\n  return [useTable];\n});\n\n_c6 = Table;\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = function (val) {\n  return typeof val !== 'number';\n}; // This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\n\n\nfunction roundedMedian(leafValues) {\n  var min = leafValues[0] || 0;\n  var max = leafValues[0] || 0;\n  leafValues.forEach(function (value) {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n  return Math.round((min + max) / 2);\n}\n\nvar IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_c7 = _s6(function (_ref9, ref) {\n  _s6();\n\n  var indeterminate = _ref9.indeterminate,\n      rest = _objectWithoutProperties(_ref9, [\"indeterminate\"]);\n\n  var defaultRef = React.useRef();\n  var resolvedRef = ref || defaultRef;\n  React.useEffect(function () {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({\n      type: \"checkbox\",\n      ref: resolvedRef\n    }, rest), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 11\n    }, _this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c8 = IndeterminateCheckbox;\nexport default Table;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"DefaultColumnFilter\");\n$RefreshReg$(_c3, \"SelectColumnFilter\");\n$RefreshReg$(_c4, \"SliderColumnFilter\");\n$RefreshReg$(_c5, \"NumberRangeColumnFilter\");\n$RefreshReg$(_c6, \"Table\");\n$RefreshReg$(_c7, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c8, \"IndeterminateCheckbox\");","map":{"version":3,"sources":["C:/Users/Lourdes/Documents/MedicalTeachingPassport/pages/index.js"],"names":["React","useTable","usePagination","useSortBy","useFilters","useGroupBy","useExpanded","useRowSelect","EditableCell","initialValue","value","index","row","id","column","updateMyData","editable","useState","setValue","onChange","e","target","onBlur","useEffect","DefaultColumnFilter","filterValue","preFilteredRows","setFilter","count","length","undefined","SelectColumnFilter","options","useMemo","Set","forEach","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","autoRemove","Table","columns","data","skipReset","td_header","td_style","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","Cell","autoResetPage","autoResetSelectedRows","disableMultiSort","hooks","visibleColumns","push","groupByBoundary","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","headerGroup","getHeaderGroupProps","headers","getHeaderProps","canGroupBy","getGroupByToggleProps","isGrouped","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","Number","filterGreaterThan","roundedMedian","leafValues","round","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {\r\n    useTable,\r\n    usePagination,\r\n    useSortBy,\r\n    useFilters,\r\n    useGroupBy,\r\n    useExpanded,\r\n    useRowSelect,\r\n  } from 'react-table'\r\n  \r\n  // import makeData from '../example/makedata.js'\r\n  \r\n  \r\n  // Create an editable cell renderer\r\n  const EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n    editable,\r\n  }) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue)\r\n  \r\n    const onChange = e => {\r\n      setValue(e.target.value)\r\n    }\r\n  \r\n    // We'll only update the external data when the input is blurred\r\n    const onBlur = () => {\r\n      updateMyData(index, id, value)\r\n    }\r\n  \r\n    // If the initialValue is changed externall, sync it up with our state\r\n    React.useEffect(() => {\r\n      setValue(initialValue)\r\n    }, [initialValue])\r\n  \r\n    if (!editable) {\r\n      return `${initialValue}`\r\n    }\r\n  \r\n    return <input value={value} onChange={onChange} onBlur={onBlur} />\r\n  }\r\n  \r\n  // Define a default UI for filtering\r\n  function DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n  }) {\r\n    const count = preFilteredRows.length\r\n  \r\n    return (\r\n      <input\r\n        value={filterValue || ''}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`Search ${count} records...`}\r\n      />\r\n    )\r\n  }\r\n  \r\n  // This is a custom filter UI for selecting\r\n  // a unique option from a list\r\n  function SelectColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) {\r\n    // Calculate the options for filtering\r\n    // using the preFilteredRows\r\n    const options = React.useMemo(() => {\r\n      const options = new Set()\r\n      preFilteredRows.forEach(row => {\r\n        options.add(row.values[id])\r\n      })\r\n      return [...options.values()]\r\n    }, [id, preFilteredRows])\r\n  \r\n    // Render a multi-select box\r\n    return (\r\n      <select\r\n        value={filterValue}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined)\r\n        }}\r\n      >\r\n        <option value=\"\">All</option>\r\n        {options.map((option, i) => (\r\n          <option key={i} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    )\r\n  }\r\n  \r\n  // This is a custom filter UI that uses a\r\n  // slider to set the filter value between a column's\r\n  // min and max values\r\n  function SliderColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n  }) {\r\n    // Calculate the min and max\r\n    // using the preFilteredRows\r\n  \r\n    const [min, max] = React.useMemo(() => {\r\n      let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n      let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n      preFilteredRows.forEach(row => {\r\n        min = Math.min(row.values[id], min)\r\n        max = Math.max(row.values[id], max)\r\n      })\r\n      return [min, max]\r\n    }, [id, preFilteredRows])\r\n  \r\n    return (\r\n      <>\r\n        <input\r\n          type=\"range\"\r\n          min={min}\r\n          max={max}\r\n          value={filterValue || min}\r\n          onChange={e => {\r\n            setFilter(parseInt(e.target.value, 10))\r\n          }}\r\n        />\r\n        <button onClick={() => setFilter(undefined)}>Off</button>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  // This is a custom UI for our 'between' or number range\r\n  // filter. It uses two number boxes and filters rows to\r\n  // ones that have values between the two\r\n  function NumberRangeColumnFilter({\r\n    column: { filterValue = [], preFilteredRows, setFilter, id },\r\n  }) {\r\n    const [min, max] = React.useMemo(() => {\r\n      let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n      let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n      preFilteredRows.forEach(row => {\r\n        min = Math.min(row.values[id], min)\r\n        max = Math.max(row.values[id], max)\r\n      })\r\n      return [min, max]\r\n    }, [id, preFilteredRows])\r\n  \r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <input\r\n          value={filterValue[0] || ''}\r\n          type=\"number\"\r\n          onChange={e => {\r\n            const val = e.target.value\r\n            setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n          }}\r\n          placeholder={`Min (${min})`}\r\n          style={{\r\n            width: '70px',\r\n            marginRight: '0.5rem',\r\n          }}\r\n        />\r\n        to\r\n        <input\r\n          value={filterValue[1] || ''}\r\n          type=\"number\"\r\n          onChange={e => {\r\n            const val = e.target.value\r\n            setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n          }}\r\n          placeholder={`Max (${max})`}\r\n          style={{\r\n            width: '70px',\r\n            marginLeft: '0.5rem',\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  function fuzzyTextFilterFn(rows, id, filterValue) {\r\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n  }\r\n  \r\n  // Let the table remove the filter if the string is empty\r\n  fuzzyTextFilterFn.autoRemove = val => !val\r\n  \r\n  // Be sure to pass our updateMyData and the skipReset option\r\n  function Table({ columns, data, updateMyData, skipReset }) {\r\n    const td_header = \"px-4 py-2\"\r\n  const td_style = \"border px-4 py-2\"\r\n    const filterTypes = React.useMemo(\r\n      () => ({\r\n        // Add a new fuzzyTextFilterFn filter type.\r\n        fuzzyText: fuzzyTextFilterFn,\r\n        // Or, override the default text filter to use\r\n        // \"startWith\"\r\n        text: (rows, id, filterValue) => {\r\n          return rows.filter(row => {\r\n            const rowValue = row.values[id]\r\n            return rowValue !== undefined\r\n              ? String(rowValue)\r\n                  .toLowerCase()\r\n                  .startsWith(String(filterValue).toLowerCase())\r\n              : true\r\n          })\r\n        },\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const defaultColumn = React.useMemo(\r\n      () => ({\r\n        // Let's set up our default Filter UI\r\n        Filter: DefaultColumnFilter,\r\n        // And also our default editable cell\r\n        Cell: EditableCell,\r\n      }),\r\n      []\r\n    )\r\n  \r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page, // Instead of using 'rows', we'll use page,\r\n      // which has only the rows for the active page\r\n  \r\n      // The rest of these things are super handy, too ;)\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      pageCount,\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n      state: {\r\n        pageIndex,\r\n        pageSize,\r\n        sortBy,\r\n        groupBy,\r\n        expanded,\r\n        filters,\r\n        selectedRowIds,\r\n      },\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        filterTypes,\r\n        // updateMyData isn't part of the API, but\r\n        // anything we put into these options will\r\n        // automatically be available on the instance.\r\n        // That way we can call this function from our\r\n        // cell renderer!\r\n        updateMyData,\r\n        // We also need to pass this so the page doesn't change\r\n        // when we edit the data.\r\n        autoResetPage: !skipReset,\r\n        autoResetSelectedRows: !skipReset,\r\n        disableMultiSort: true,\r\n      },\r\n      useFilters,\r\n      useGroupBy,\r\n      useSortBy,\r\n      useExpanded,\r\n      usePagination,\r\n      useRowSelect,\r\n      // Here we will use a plugin to add our selection column\r\n      hooks => {\r\n        hooks.visibleColumns.push(columns => {\r\n          return [\r\n            {\r\n              id: 'selection',\r\n              // Make this column a groupByBoundary. This ensures that groupBy columns\r\n              // are placed after it\r\n              groupByBoundary: true,\r\n              // The header can use the table's getToggleAllRowsSelectedProps method\r\n              // to render a checkbox\r\n              Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                <div>\r\n                  <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n                </div>\r\n              ),\r\n              // The cell can use the individual row's getToggleRowSelectedProps method\r\n              // to the render a checkbox\r\n              Cell: ({ row }) => (\r\n                <div>\r\n                  <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                </div>\r\n              ),\r\n            },\r\n            ...columns,\r\n          ]\r\n        })\r\n      }\r\n    )\r\n  \r\n    // Render the UI for your table\r\n    return (\r\n      <>\r\n        <table className=\"w-full text-md bg-white shadow-md rounded mb-4\" {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th className={td_header} {...column.getHeaderProps()}>\r\n                    <div>\r\n                      {column.canGroupBy ? (\r\n                        // If the column can be grouped, let's add a toggle\r\n                        <span {...column.getGroupByToggleProps()}>\r\n                          {column.isGrouped ? 'Click to Un-Group 🛑 Click to Sort!' : ' Click to Group 🔮 Click to Sort!'}\r\n                        </span>\r\n                      ) : null}\r\n                      <span {...column.getSortByToggleProps()}>\r\n                        {column.render('Header')}\r\n                        {/* Add a sort direction indicator */}\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? ' 🔽'\r\n                            : ' 🔼'\r\n                          : ''}\r\n                      </span>\r\n                    </div>\r\n                    {/* Render the columns filter UI */}\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map(row => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return (\r\n                      <td className = {td_style} {...cell.getCellProps()}>\r\n                        {cell.isGrouped ? (\r\n                          // If it's a grouped cell, add an expander and row count\r\n                          <>\r\n                            <span {...row.getToggleRowExpandedProps()}>\r\n                              {row.isExpanded ? '👇' : '👉'}\r\n                            </span>{' '}\r\n                            {cell.render('Cell', { editable: false })} (\r\n                            {row.subRows.length})\r\n                          </>\r\n                        ) : cell.isAggregated ? (\r\n                          // If the cell is aggregated, use the Aggregated\r\n                          // renderer for cell\r\n                          cell.render('Aggregated')\r\n                        ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                          // Otherwise, just render the regular cell\r\n                          cell.render('Cell', { editable: true })\r\n                        )}\r\n                      </td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        {/*\r\n          Pagination can be built however you'd like.\r\n          This is just a very basic UI implementation:\r\n        */}\r\n        <div className=\"pagination\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n            {'<<'}\r\n          </button>{' '}\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n            {'<'}\r\n          </button>{' '}\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n            {'>'}\r\n          </button>{' '}\r\n          <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n            {'>>'}\r\n          </button>{' '}\r\n          <span>\r\n            Page{' '}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{' '}\r\n          </span>\r\n          <span>\r\n            | Go to page:{' '}\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={pageIndex + 1}\r\n              onChange={e => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                gotoPage(page)\r\n              }}\r\n              style={{ width: '100px' }}\r\n            />\r\n          </span>{' '}\r\n          <select\r\n            value={pageSize}\r\n            onChange={e => {\r\n              setPageSize(Number(e.target.value))\r\n            }}\r\n          >\r\n            {[10, 20, 30, 40, 50].map(pageSize => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <pre>\r\n          {/* <code>\r\n            {JSON.stringify(\r\n              {\r\n                pageIndex,\r\n                pageSize,\r\n                pageCount,\r\n                canNextPage,\r\n                canPreviousPage,\r\n                sortBy,\r\n                groupBy,\r\n                expanded: expanded,\r\n                filters,\r\n                selectedRowIds: selectedRowIds,\r\n              },\r\n              null,\r\n              2\r\n            )}\r\n          </code> */}\r\n        </pre>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  // Define a custom filter filter function!\r\n  function filterGreaterThan(rows, id, filterValue) {\r\n    return rows.filter(row => {\r\n      const rowValue = row.values[id]\r\n      return rowValue >= filterValue\r\n    })\r\n  }\r\n  \r\n  // This is an autoRemove method on the filter function that\r\n  // when given the new filter value and returns true, the filter\r\n  // will be automatically removed. Normally this is just an undefined\r\n  // check, but here, we want to remove the filter if it's not a number\r\n  filterGreaterThan.autoRemove = val => typeof val !== 'number'\r\n  \r\n  // This is a custom aggregator that\r\n  // takes in an array of leaf values and\r\n  // returns the rounded median\r\n  function roundedMedian(leafValues) {\r\n    let min = leafValues[0] || 0\r\n    let max = leafValues[0] || 0\r\n  \r\n    leafValues.forEach(value => {\r\n      min = Math.min(min, value)\r\n      max = Math.max(max, value)\r\n    })\r\n  \r\n    return Math.round((min + max) / 2)\r\n  }\r\n  \r\n  const IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n      const defaultRef = React.useRef()\r\n      const resolvedRef = ref || defaultRef\r\n  \r\n      React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate\r\n      }, [resolvedRef, indeterminate])\r\n  \r\n      return (\r\n        <>\r\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n        </>\r\n      )\r\n    }\r\n  )\r\n  \r\n \r\n  \r\n  export default Table"]},"metadata":{},"sourceType":"module"}